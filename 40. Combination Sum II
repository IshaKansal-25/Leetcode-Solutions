Leetcode 40 - Combination Sum II

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

Code:

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        LinkedList<Integer> combination=new LinkedList<Integer>();
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, combination, result);
        return result;
    }
    protected void backtrack(int[] candidates, int remain, int start, LinkedList<Integer> combination, List<List<Integer>> result)
    {
        if(remain == 0)
        {
            result.add(new ArrayList<Integer>(combination));
            return;
        }
        else if(remain < 0)
            return;
        for(int i=start; i<candidates.length; i++)
        {
            if(i>start && candidates[i-1]==candidates[i])
                continue;
            combination.add(candidates[i]);
            backtrack(candidates, remain-candidates[i], i+1, combination, result);
            combination.removeLast();
        }
    }
}
